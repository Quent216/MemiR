fct_graph<- function(Seq, l_Seqp, Pos_met){
# Creation de la structure secondaire sous format graphique.
# Etant donné que l'on passe par des graphes dirigé, il est possible que la
# chaine se croise de temps en temps.
Seqp <- l_Seqp[[1]]
l <- length(Seqp)
from <- c(1:(l-1))
to <- c(2:l)
tmp <- matrix(100, nrow = 1, ncol = (l-1))
poids <- tmp[1,]
pile <- c()
for(i in 1:l){
if (Seqp[i]=="("){
pile <- append(pile, i)
}
if(Seqp[i]==")"){
from <- append(from, pile[length(pile)])
to <- append(to, i)
pile <- pile[-length(pile)]
poids <- append(poids, 5)
}
}
Edges <- data.frame(From = from, To = to, Weight = poids)
id <- c(1:l)
if (Pos_met == 0){
methylated <- c()
for (i in id){
methylated <- append(methylated, 1)
}
Nodes <- data.frame(id = id, Base = toupper(Seq), Methylated = methylated)
coul <- c("gray50")
}
else {
methylated <- c()
for (i in id){
if(grepl("[AUCG]", Seq[i])){
methylated <- append(methylated, 2)
}
else{
methylated <- append(methylated, 1)
}
}
methylated[Pos_met] <- 3
Nodes <- data.frame(id = id, Base = toupper(Seq), Methylated = methylated)
coul <- c("gray50", "tomato", "gold")
}
net <- graph_from_data_frame(d=Edges, vertices=Nodes, directed=F)
V(net)$color <- coul[V(net)$Methylated]
#V(net)$frame.color <- "red"
l <- layout_with_fr(net)
l <- norm_coords(l, ymin=-2, ymax=2, xmin=-5, xmax=5)
plot(net, vertex.label = Nodes$Base, layout = l, rescale=T)
if(Pos_met !=0){
legend(x=-1.5, y=-1.1, c("No methylation","Part of the methylation pattern", "Methylated"), pch=21,
col="#777777", pt.bg=coul, pt.cex=2, cex=1, bty="n", ncol=1, title = paste("Folding of the mir with an energy of", l_Seqp[[2]], "kcal/mole", sep = " "))
}
else{
legend(x=-1.5, y=-1.1, c("No methylation"), pch=21,
col="#777777", pt.bg=coul, pt.cex=2, cex=1, bty="n", ncol=1, title = paste("Folding of the mir with an energy of", l_Seqp[[2]], "kcal/mole", sep = " "))
}
}
fct_update <- function(methy){
Pos <- methy$Position
Methyla <- methy$Methylation
Liste <- c()
for(i in 1:(length(Pos))){
if (Methyla[i] == 'm7G'){
Liste <- append(Liste, paste(Methyla[i], Pos[i], methy$Position_debut[i],
sep = "__"))
}
else{
Liste <- append(Liste, paste(Methyla[i], Pos[i], sep = "__"))
}
}
return(Liste)
}
runApp('mir4to.v2')
up_reg <- c("hsa-miR-210-3p", "hsa-miR-181a-5p"")
""
up_reg <- c("hsa-miR-210-3p", "hsa-miR-181a-5p")
down_reg <- c("hsa-miR-320a")
fct_activation(up_reg, down_reg, 1, 1, 1)
fct_inhibition(up_reg, down_reg, 1, 1, 1)
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
fct_Target_General("m", Base_util)
a <- "hsa-miR-16-5p
hsa-miR-29c-3p
hsa-miR-210-3p
r"
a
up <- fct_lire(a, "\n", F)
up
up <- fct_lire(a, "\n", T)
up
b <- "hsa-miR-339-3p
hsa-miR-140-3p
hsa-miR-93-5p"
down <- fct_lire(b, "\n", T)
down
fct_activation(up, down, 1, 1, 1)
fct_inhibition(up, down, 1, 1, 1)
runApp('mir4to.v2')
a
up
a <- "hsa-miR-16-5p
hsa-miR-29c-3p
hsa-miR-210-3p
""
"
a <- "hsa-miR-16-5p
hsa-miR-29c-3p
hsa-miR-210-3p
"
a
up <- fct_lire(a, "\n", T)
fct_inhibition(up, down, 1, 1, 1)
fct_Target_General("", Base_util)
up
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp()
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
rbind(t, c(4, 5), data.frame(z = c(5, 6)))
rbind(t, c(4, 5), data.frame(z = c(5, 6)))
x <- data.frame(z = c(5, 6)
)
rbind(t, c(4, 5), x)
cbind(c(4, 5), x)
w <-cbind(c(4, 5), x)
w <- rbind(w, w)
w
w <- rbind(w, data.frame(r = c(4), f = c(78)))
fct_acti_repr <- function(up_reg, down_reg){
# Cree la liste des proteines activees
# Initialisation ----
activa <- data.frame()
activa_vect <- c()
activa_unique <- c()
repres <- data.frame()
repres_vect <- c()
final_vect <- c()
final <- data.frame()
# Recuperation des donnees ----
for (mir_u in up_reg){
if (mir_u != ""){
tar <- fct_Target_General(mir_u, Clean_target)
mir <- c(rep(mir_u, length(tar[,1])))
inter <- cbind(mir, tar)
if (!is.null(inter[1, 1])){colnames(inter)[1] <- "Mir"}
activa <- rbind(activa, inter)
}
}
for (mir_d in down_reg){
if (mir_d != ""){
tar <- fct_Target_General(mir_d, Clean_target)
mir <- c(rep(mir_u, length(tar[,1])))
inter <- cbind(mir, tar)
if (!is.null(inter[1, 1])){colnames(inter)[1] <- "Mir"}
repres <- rbind(repres, inter)
}
}
return(list(activa, repres))
}
fct_acti_repr("hsa-miR-21-5p", "r")
fct_acti_repr("hsa-miR-21-5p", "hsa-let-7c-5p")
w
w <- rbind(w, c())
w
x <- cbind(c(), c())
x
w <- rbind(w, x)
w
fct_acti_repr <- function(up_reg, down_reg){
# Cree la liste des proteines activees
# Initialisation ----
activa <- data.frame()
activa_vect <- c()
activa_unique <- c()
repres <- data.frame()
repres_vect <- c()
final_vect <- c()
final <- data.frame()
# Recuperation des donnees ----
for (mir_u in up_reg){
if (mir_u != ""){
tar <- fct_Target_General(mir_u, Clean_target)
mir <- c(rep(mir_u, length(tar[,1])))
inter <- cbind(mir, tar)
if (!is.null(inter[1, 1])){colnames(inter)[1] <- "Mir"}
activa <- rbind(activa, inter)
}
}
for (mir_d in down_reg){
if (mir_d != ""){
tar <- fct_Target_General(mir_d, Clean_target)
mir <- c()
if(!is.null(tar[1, 1])){mir <- c(rep(mir_u, length(tar[,1])))}
inter <- cbind(mir, tar)
if (!is.null(inter[1, 1])){colnames(inter)[1] <- "Mir"}
repres <- rbind(repres, inter)
}
}
return(list(activa, repres))
}
fct_acti_repr("hsa-miR-21-5p", "r")
b <- c("efzef", 'zdafz', '&zae')
t <- b[grep("e", b)]
t
paste0(t)
t[-1]
t[3 ]<- "dzfe"
t
for(i in t[-1]){print(i)}
for (i in 1:0){print (i)}
runApp('mir4to.v2')
runApp('mir4to.v2')
fct_acti_repr("hsa-miR-21-5p", "r")
runApp('mir4to.v2')
up <- "hsa-miR-29c-3p
hsa-miR-210-3p
hsa-miR-181a-5p
hsa-miR-339-3p
hsa-miR-140-3p"
up <- fct_lire(up, "\n", T)
down <- "hsa-miR-320a
hsa-miR-125b-1-3p
hsa-miR-423-5p
hsa-miR-151a-5p
hsa-miR-138-5p
hsa-miR-652-3p
hsa-miR-29c-5p"
down <- fct_lire(down, "\n", T)
x <- fct_acti_repr(up, down)
activa <- x[[1]]
activa
repres <- x[[2]]
activa_dt <- activa[as.numeric(activa$`Nb of strong evidence`)*1+
as.numeric(activa$`Nb of less strong evidence`)*1
>= 4,c("Mir","Target")]
repres_vect <- repres[as.numeric(repres$`Nb of strong evidence`)*1+
as.numeric(repres$`Nb of less strong evidence`)*1
>= 4,c("Target")]
activa_dt
repres_vect
activa_unique <- fct_mir_unique(activa_dt)
activa_unique
a
z
w
x
c
v
b
c <- b[1, 2]
c <- b[c(1, 2)]
c
p <- c[1]
for (o in c[-1]){p <- paste(p, o, ", ")}
p
fct_mir_unique <- function(dt){
final <- data.frame()
for (tar in dt$Target){
tot <- dt$Mir[grep(paste0('^', tar, "$"), dt$Target)]
mirs <- tot[1]
for(mir in tot[-1]){
mirs <- paste(mirs, mir, sep = ", ")
}
inter <- data.frame(Mir = mirs, Target = tar)
final <- rbind(final, inter)
}
return(final)
}
activa_unique <- fct_mir_unique(activa_dt)
activa_unique
final_dt <- activa_unique[!sapply(activa_unique, is.element, repres_vect), c("Mir", "Target")]
final_dt
repres_vect
go <- T
target_vect <- c()
therapie_vect <- c()
mir_vect <- c()
if (go){
for (target in final_dt$Target) {
target_exact <- paste0('^', target, '$')
mir <- final_dt$Mir[grep(target, final_dt$Target)]
indices <- grep(target_exact, target_therapie$Target)
if (length(indices)==0){
therapie_vect <- append(therapie_vect, "No therapie available")
target_vect <-append(target_vect, target)
mir_vect <-append(mir_vect, mir)
}
else{
therapie <- target_therapie$Therapie[indices]
therapie_vect <- append(therapie_vect, therapie)
target_vect <-append(target_vect, c(rep(target, length(indices))))
mir_vect <-append(mir_vect, c(rep(mir, length(indices))))
}
}
}
final_dt
final
final <- data.frame(Mir = mir_vect, Prot =target_vect, Treatment = therapie_vect)
mir_vect
target_vect
therapie_vect
activa_unique
final_dt <- activa_unique[!sapply(activa_unique, is.element, repres_vect), c("Mir", "Target")]
final_dt <- activa_unique[!sapply(activa_unique, is.element, repres_vect), ]
final_dt
activa_unique
repres_vect
final_dt <- activa_unique[!sapply(activa_unique$Target, is.element, repres_vect), ]
final_dt
target_vect <- c()
therapie_vect <- c()
mir_vect <- c()
if (go){
for (target in final_dt$Target) {
target_exact <- paste0('^', target, '$')
mir <- final_dt$Mir[grep(target, final_dt$Target)]
indices <- grep(target_exact, target_therapie$Target)
if (length(indices)==0){
therapie_vect <- append(therapie_vect, "No therapie available")
target_vect <-append(target_vect, target)
mir_vect <-append(mir_vect, mir)
}
else{
therapie <- target_therapie$Therapie[indices]
therapie_vect <- append(therapie_vect, therapie)
target_vect <-append(target_vect, c(rep(target, length(indices))))
mir_vect <-append(mir_vect, c(rep(mir, length(indices))))
}
}
}
# Creation du dataframe -----
final <- data.frame(Mir = mir_vect, Prot =target_vect, Treatment = therapie_vect)
mir_vect
final_dt
target <- "BCL2"
target_vect <- c()
therapie_vect <- c()
mir_vect <- c()
mir <- final_dt$Mir[grep(target, final_dt$Target)]
mir
grep(target, final_dt$Target)
activa_unique
fct_mir_unique <- function(dt){
final <- data.frame()
tar_uni <- c()
for (tar in dt$Target){
if (!(tar %in% tar_uni)){
tar_uni <- append(tar_uni, tar)
tot <- dt$Mir[grep(paste0('^', tar, "$"), dt$Target)]
mirs <- tot[1]
for(mir in tot[-1]){
mirs <- paste(mirs, mir, sep = ", ")
}
inter <- data.frame(Mir = mirs, Target = tar)
final <- rbind(final, inter)
}
}
return(final)
}
activa_unique <- fct_mir_unique(activa_dt)
final_dt <- activa_unique[!sapply(activa_unique$Target, is.element, repres_vect), ]
target_vect <- c()
therapie_vect <- c()
mir_vect <- c()
if (go){
for (target in final_dt$Target) {
target_exact <- paste0('^', target, '$')
mir <- final_dt$Mir[grep(target, final_dt$Target)]
indices <- grep(target_exact, target_therapie$Target)
if (length(indices)==0){
therapie_vect <- append(therapie_vect, "No therapie available")
target_vect <-append(target_vect, target)
mir_vect <-append(mir_vect, mir)
}
else{
therapie <- target_therapie$Therapie[indices]
therapie_vect <- append(therapie_vect, therapie)
target_vect <-append(target_vect, c(rep(target, length(indices))))
mir_vect <-append(mir_vect, c(rep(mir, length(indices))))
}
}
}
# Creation du dataframe -----
final <- data.frame(Mir = mir_vect, Prot =target_vect, Treatment = therapie_vect)
mir_vect
final_dt
activa_dt
final_dt
grep("BCL2", final_dt$Target)
grep("^BCL2$", final_dt$Target)
target_exact <- "^BCL2$"
mir <- final_dt$Mir[grep(target, final_dt$Target)]
mir
if (go){
for (target in final_dt$Target) {
target_exact <- paste0('^', target, '$')
mir <- final_dt$Mir[grep(target_exact, final_dt$Target)]
indices <- grep(target_exact, target_therapie$Target)
if (length(indices)==0){
therapie_vect <- append(therapie_vect, "No therapie available")
target_vect <-append(target_vect, target)
mir_vect <-append(mir_vect, mir)
}
else{
therapie <- target_therapie$Therapie[indices]
therapie_vect <- append(therapie_vect, therapie)
target_vect <-append(target_vect, c(rep(target, length(indices))))
mir_vect <-append(mir_vect, c(rep(mir, length(indices))))
}
}
}
# Creation du dataframe -----
final <- data.frame(Mir = mir_vect, Prot =target_vect, Treatment = therapie_vect)
target_vect <- c()
therapie_vect <- c()
mir_vect <- c()
if (go){
for (target in final_dt$Target) {
target_exact <- paste0('^', target, '$')
mir <- final_dt$Mir[grep(target_exact, final_dt$Target)]
indices <- grep(target_exact, target_therapie$Target)
if (length(indices)==0){
therapie_vect <- append(therapie_vect, "No therapie available")
target_vect <-append(target_vect, target)
mir_vect <-append(mir_vect, mir)
}
else{
therapie <- target_therapie$Therapie[indices]
therapie_vect <- append(therapie_vect, therapie)
target_vect <-append(target_vect, c(rep(target, length(indices))))
mir_vect <-append(mir_vect, c(rep(mir, length(indices))))
}
}
}
# Creation du dataframe -----
final <- data.frame(Mir = mir_vect, Prot =target_vect, Treatment = therapie_vect)
runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
library(shiny)
runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
ppp <-6
pp
ppp
runApp('mir4to.v2')
runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
shiny::runApp('mir4to.v2')
shiny::runApp('MemiR')
