Seq <- fct_lire(mir, "[aucg]", FALSE)
E_min <- min(fct_calcul(Seq)[[1]])
if (E_min < 0){
no_lin <- no_lin + 1
E_non_li <- append(E_non_li, E_min)
te <- sapply(Match_Boucle, grepl, mir)
if (is.element(TRUE, te)){
pres <- pres + 1
}
}
else {
linear <- linear + 1
}
}
}
pie(c(linear, no_lin), c(paste("Linear", round(linear/(no_lin+linear)*100), "%", sep = " "),
paste("No linear", round(no_lin/(no_lin+linear)*100),"%", sep = " ")))
runApp('mir4to.v2')
fct_calcul <- function(Seq){
# Calcul 3 matrices. La premiere represente l'energie minimale entre deux paires de bases.
# La deuxieme correspond a la "direction" de repliement du miARN
# La troisieme correspond a l'energie minimale si il y a appariement entre i et j
# Creation des matrices
len <- length(Seq)
E <- matrix(data = 1000, nrow = len, ncol = len) # On le met à 1000 pour eviter etre sur de ne pas fausser les calculs
V <- matrix(data = 1000, nrow = len, ncol = len) # On le met à 1000 pour eviter etre sur de ne pas fausser les calculs
# Petit point sur Dir[i, j]
# 1 = Meilleur structure entre i et j-1
# 2 = Appariement entre i et j
# 3 = Meilleur structure entre i+1 et j
# 5,XX = Meilleur structure est la somme de (i, XX) et (XX + 1, j)
# 8 = Hairpin entre i et j
# 7,XX = Renfoncement de XX base en i
# 9,XX = Renfoncement de XX base en i
Dir <- matrix(data = 0, nrow = len, ncol = len)
# L'algorithme
for (k in 4:(len - 1)){ # On a besoin d'au moins 5 base pour faire une structure coherente
for (i in 1:(len - k)){
j <- i+k
brin_1 <- fct_complementary(c(Seq[i], Seq[i+1]))
brin_2 <- c(Seq[j], Seq[j-1])
com <- fct_equal(brin_1, brin_2) # les resultats possibles sont 0 si il n'y a aucun appariement, 1 si i et j s'apparient et 2 si tout est apparie
# Energie de l'assemblage de deux structures entre i et j
El_final <- 10000
l_final<- 0
if (j-i > 2){
for (l in ((i+1):(j-1))){
El <- E[i, l]+E[l+1, j]
if (El < El_final){
El_final <- El
l_final <- l
}
}
}
# Cas où il n'y a aucun appariement
if (com == 0){
E[i, j] <- min(E[i+1, j], E[i, j-1], El_final, na.rm = TRUE)
if(E[i, j]== El_final){Dir[i, j] <- 1 + 0.01*l_final}
if(E[i, j] == E[i+1, j]){Dir[i, j] <- 3}
if(E[i, j] == E[i, j-1]){Dir[i, j] <- 1}
}
# Calcul des renfoncement possible
bul_final_i<- 10000
mfinal_i <- 0
bul_final_j<- 10000
mfinal_j <- 0
if(j-i > 6){
for(m in 1:(j-i-6)){
if(fct_equal(fct_complementary(c(Seq[i], Seq[i+1+m])), c(Seq[j], Seq[j-1]))==2){
# li <- paste(toupper(Seq[j]), toupper(Seq[i]), sep = "/")
# co <- paste(toupper(Seq[j-1]), toupper(Seq[i+m+1]), sep = "/")
# alpha <- empile_98[li, co]
li <- paste(toupper(Seq[i]), toupper(Seq[j]), sep = "/")
co <- paste(toupper(Seq[i+m+1]), toupper(Seq[j-1]),  sep = "/")
alpha <- empile_04[li, co]
#if(m == 1){bul <- alpha+V[i+m+1, j-1]+bou_perte["Bulge", m]}
#else{bul <- V[i+m+1, j-1]+bou_perte["Bulge", m]}
bul <- alpha+V[i+m+1, j-1]+bou_perte["Bulge", m]
#bul <- alpha+V[i+m+1, j-1]+as.numeric(bou_perte_04$Bulge[m])
if (bul < bul_final_i){
mfinal_i <- m
bul_final_i <- bul
}
}
if(fct_equal(fct_complementary(c(Seq[i], Seq[i+1])), c(Seq[j], Seq[j-1-m]))==2){
# li <- paste(toupper(Seq[j]), toupper(Seq[i]), sep = "/")
# co <- paste(toupper(Seq[j-m-1]), toupper(Seq[i+1]), sep = "/")
# alpha <- empile_98[li, co]
li <- paste(toupper(Seq[i]), toupper(Seq[j]), sep = "/")
co <- paste(toupper(Seq[i+1]), toupper(Seq[j-m-1]), sep = "/")
alpha <- empile_04[li, co]
#if(m == 1){bul <- alpha+V[i+1, j-m-1]+bou_perte["Bulge", m]}
#else{bul <- V[i+1, j-m-1]+bou_perte["Bulge", m]}
bul <- alpha+V[i+1, j-m-1]+bou_perte["Bulge", m]
#bul <- alpha+V[i+1, j-m-1]+as.numeric(bou_perte_04$Bulge[m])
if (bul < bul_final_j){
mfinal_j <- m
bul_final_j <- bul
}
}
}
}
int_loop_final <- 10000
k_final <- 0
if (j-i >= 10){
for (k1 in 2:(j-i-8)){
for (k2 in 2:(j-i-8)){
if (j-i-6-k1-k2 >= 0){
if(fct_equal(fct_complementary(c(Seq[i], Seq[i+k1+1])), c(Seq[j], Seq[j-1-k2]))==2){
# li <- paste(toupper(Seq[j]), toupper(Seq[i]), sep = "/")
# co <- paste(toupper(Seq[j-k2-1]), toupper(Seq[i+1+k1]), sep = "/")
# alpha <- empile_98[li, co]
li <- paste(toupper(Seq[i]), toupper(Seq[j]), sep = "/")
co <- paste(toupper(Seq[i+1+k1]), toupper(Seq[j-k2-1]), sep = "/")
alpha <- empile_04[li, co]
kp <- (k1+k2)
# if (kp == 2){int_loop <- alpha+V[i+1+k1, j-k2-1]+bou_perte["Interne_loop", kp]}
# else{int_loop <- V[i+1+k1, j-k2-1]+bou_perte["Interne_loop", kp]}
int_loop <- alpha+V[i+1+k1, j-k2-1]+bou_perte["Interne_loop", kp]
#int_loop <- alpha+V[i+1+k1, j-k2-1]+as.numeric(bou_perte_04$`Internal loop`[kp])
if (int_loop < int_loop_final){
k_final<- k1+k2*0.01
int_loop_final <- int_loop
}
}
}
}
}
}
# Cas où i et j s'apparient
if (com == 1){
#V[i, j] <- min(as.numeric(bou_perte_04$Hairpin[(j-i-1)]), bul_final_i, bul_final_j, int_loop_final)
V[i, j] <- min(bou_perte["Hairpin",(j-i-1)], bul_final_i, bul_final_j, int_loop_final)
E[i, j] <- min(E[i+1, j], E[i, j-1], V[i, j], El_final, na.rm = TRUE)
if(E[i, j] == El_final){Dir[i, j] <- 5 + 0.01*l_final}
if(E[i, j] == E[i+1, j]){Dir[i, j] <- 3}
if(E[i, j] == E[i, j-1]){Dir[i, j] <- 1}
#if(V[i, j] == bou_perte_04$Hairpin[(j-i-1)]){Dir[i, j] <- 8}
if(V[i, j] == bou_perte["Hairpin",(j-i-1)]){Dir[i, j] <- 8}
if(V[i, j] == bul_final_i){Dir[i, j] <- 7+mfinal_i*0.01}
if(V[i, j] == bul_final_j){Dir[i, j] <- 9+mfinal_j*0.01}
if(V[i, j] == int_loop_final){Dir[i, j] <- 4+k_final*0.01}
}
# Cas où tout est apparié
if (com == 2){
# li <- paste(toupper(Seq[j]), toupper(Seq[i]), sep = "/")
# co <- paste(toupper(Seq[j-1]), toupper(Seq[i+1]), sep = "/")
# alpha <- empile_98[li, co]
li <- paste(toupper(Seq[i]), toupper(Seq[j]), sep = "/")
co <- paste(toupper(Seq[i+1]), toupper(Seq[j-1]), sep = "/")
alpha <- empile_04[li, co]
#hairpin <- as.numeric(bou_perte_04$Hairpin[(j-i-1)])
hairpin <- bou_perte["Hairpin", (j-i-1)]
V[i, j] <- min(alpha+V[i+1, j-1], hairpin,bul_final_j, bul_final_i, int_loop_final, na.rm = TRUE)
E[i, j] <- min(E[i+1, j], E[i, j-1], V[i, j], El_final, na.rm = TRUE)
if(E[i, j] == El_final){Dir[i, j] <- 5 + 0.01*l_final}
if(E[i, j] == E[i+1, j]){Dir[i, j] <- 3}
if(E[i, j] == E[i, j-1]){Dir[i, j] <- 1}
if(V[i, j] == (alpha+V[i+1, j-1])){Dir[i, j] <- 2}
if(V[i, j] == hairpin){Dir[i, j] <- 8}
if(V[i, j] == bul_final_i){Dir[i, j] <- 7+mfinal_i*0.01}
if(V[i, j] == bul_final_j){Dir[i, j] <- 9+mfinal_j*0.01}
if(V[i, j] == int_loop_final){Dir[i, j] <- 4+k_final*0.01}
}
# Changement pour permettre la bonne création de structure dans les algorithmes prochains
if (j-i <=5 ){
Dir[i, j] <- 8
}
}
}
# # Remise à 0 des Energies
# for(i in 1:length(E)){
#   if (round(E[i]) == 1000){
#     E[i] <- 0
#   }
#   if (round(V[i]) == 1000){
#     V[i] <- 0
#   }
# }
return(list(E, Dir, V))
}
# Partie humain ----
Match_Boucle <- c("uucg", "gaaa", "gcaa", "gaga", "guga", "ggaa", "cuug", "uuug")
pres <- 0
linear <- 0
no_lin <- 0
E_non_li <- c()
uni <- c()
for(mir in Base_util$Seq){
if (!(mir %in% uni)){
uni <- append(uni, mir)
Seq <- fct_lire(mir, "[aucg]", FALSE)
E_min <- min(fct_calcul(Seq)[[1]])
if (E_min < 0){
no_lin <- no_lin + 1
E_non_li <- append(E_non_li, E_min)
te <- sapply(Match_Boucle, grepl, mir)
if (is.element(TRUE, te)){
pres <- pres + 1
}
}
else {
linear <- linear + 1
}
}
}
pie(c(linear, no_lin), c(paste("Linear", round(linear/(no_lin+linear)*100), "%", sep = " "),
paste("No linear", round(no_lin/(no_lin+linear)*100),"%", sep = " ")))
runApp('mir4to.v2')
# Partie humain ----
Match_Boucle <- c("uucg", "gaaa", "gcaa", "gaga", "guga", "ggaa", "cuug", "uuug")
pres <- 0
linear <- 0
no_lin <- 0
E_non_li <- c()
uni <- c()
for(mir in Base_util$Seq){
if (!(mir %in% uni)){
uni <- append(uni, mir)
Seq <- fct_lire(mir, "[aucg]", FALSE)
E_min <- min(fct_calcul(Seq)[[1]])
if (E_min < 0){
no_lin <- no_lin + 1
E_non_li <- append(E_non_li, E_min)
te <- sapply(Match_Boucle, grepl, mir)
if (is.element(TRUE, te)){
pres <- pres + 1
}
}
else {
linear <- linear + 1
}
}
}
pie(c(linear, no_lin), c(paste("Linear", round(linear/(no_lin+linear)*100), "%", sep = " "),
paste("No linear", round(no_lin/(no_lin+linear)*100),"%", sep = " ")))
uni <- c()
Lin_type <- c()
No_lin_type <- c()
E_non_list <- list()
Match_Boucle <- c("uucg", "gaaa", "gcaa", "gaga", "guga", "ggaa", "cuug", "uuug")
pres <- 0
Liste_r_type <- c("sme", "ath", 'zma', "cre", "osa", "ptc", "vvi")
for (type in Liste_r_type){
linear <- 0
no_lin <- 0
E_non_li <- c()
Base_util <- fct_Choix_Base(type)
for(mir in Base_util$Seq){
if (!(mir %in% uni)){
uni <- append(uni, mir)
Seq <- fct_lire(mir, "[aucg]", FALSE)
E_min <- min(fct_calcul(Seq)[[1]])
if (E_min < 0){
no_lin <- no_lin + 1
E_non_li <- append(E_non_li, E_min)
te <- sapply(Match_Boucle, grepl, mir)
if (is.element(TRUE, te)){
pres <- pres + 1
}
}
else {
linear <- linear + 1
}
}
}
Lin_type <- append(Lin_type, linear)
No_lin_type <- append(No_lin_type, no_lin)
E_non_list[[type]] <- E_non_li
}
pie(c(Lin_type[[2]], No_lin_type[[2]]), c(paste("Linear", round(Lin_type[[2]]/(No_lin_type[[2]]+Lin_type[[2]])*100), "%", sep = " "),
paste("No linear", round(No_lin_type[[2]]/(No_lin_type[[2]]+Lin_type[[2]])*100),"%", sep = " ")))
pie(c(Lin_type[[3]], No_lin_type[[3]]), c(paste("Linear", round(Lin_type[[3]]/(No_lin_type[[3]]+Lin_type[[3]])*100), "%", sep = " "),
paste("No linear", round(No_lin_type[[3]]/(No_lin_type[[3]]+Lin_type[[3]])*100),"%", sep = " ")))
for (i in 1:7){
pie(c(Lin_type[[i]], No_lin_type[[i]]), c(paste("Linear", round(Lin_type[[i]]/(No_lin_type[[i]]+Lin_type[[i]])*100), "%", sep = " "),
paste("No linear", round(No_lin_type[[i]]/(No_lin_type[[i]]+Lin_type[[i]])*100),"%", sep = " ")))
}
for (i in 1:7){
dev.open()
pie(c(Lin_type[[i]], No_lin_type[[i]]), c(paste("Linear", round(Lin_type[[i]]/(No_lin_type[[i]]+Lin_type[[i]])*100), "%", sep = " "),
paste("No linear", round(No_lin_type[[i]]/(No_lin_type[[i]]+Lin_type[[i]])*100),"%", sep = " ")))
}
for (i in 1:7){
dev.new()
pie(c(Lin_type[[i]], No_lin_type[[i]]), c(paste("Linear", round(Lin_type[[i]]/(No_lin_type[[i]]+Lin_type[[i]])*100), "%", sep = " "),
paste("No linear", round(No_lin_type[[i]]/(No_lin_type[[i]]+Lin_type[[i]])*100),"%", sep = " ")))
dev.off()
}
for (i in 1:7){
dev.new()
pie(c(Lin_type[[i]], No_lin_type[[i]]), c(paste("Linear", round(Lin_type[[i]]/(No_lin_type[[i]]+Lin_type[[i]])*100), "%", sep = " "),
paste("No linear", round(No_lin_type[[i]]/(No_lin_type[[i]]+Lin_type[[i]])*100),"%", sep = " ")))
}
hist(-E_non_list$osa,
breaks = c((0:24)/2),
mar = c(4, 5, 0.5, 0.5), xlab = "- Free energy(in kcal/mole)", ylab = "Number of miR sequences")
runApp('mir4to.v2')
fct_triade_m_t_t_g <- function(mir, targ, coeff_fort, coeff_faible, seuil_evid){
prot_seuil <- targ$Target[as.numeric(targ$`Nb of strong evidence`)*coeff_fort + as.numeric(targ$`Nb of less strong evidence`)*coeff_faible >= seuil_evid]
if (is.na(prot_seuil[1, 1])) {
return(data.frame(Mir = rna, Issue = "No target with enough evidence"))
}
target_vect <- c()
therapie_vect <- c()
mir_vect <- c()
# Recherche de treatment -------
for (target in prot_seuil) {
target_exact <- paste0('^', target, '$')
indices <- grep(target_exact, target_therapie$Target)
if (length(indices)>0){
therapie <- target_therapie$Therapie[indices]
therapie_vect <- append(therapie_vect, therapie)
mir_vect <- append(mir_vect, c(rep(mir, length(indices))))
target_vect <-
append(target_vect, c(rep(target, length(indices))))
}
else{
therapie_vect <- append(therapie_vect, "No therapie available")
mir_vect <- append(mir_vect, mir)
target_vect <- append(target_vect, target)
}
}
# Creation des triades -----
m_t_t <-
data.frame(miR = mir_vect,
Target = target_vect,
Therapie = therapie_vect)
colnames(m_t_t)[3] <- "Treatment"
return(m_t_t)
}
fct_Target_General <- function(mir, Base){
target <- data.frame()
indices <- grep(mir, Base$Mir)
if( is.na(indices[1]) ){return(target)}
mir_tar <- Base[indices, c('Target', 'Experiment')]
prot_unique <- c()
prot_unique <- unique(mir_tar$Target)
for (prot in prot_unique){
score_fort <- 0
score_faible <- 0
indices2<- grep(prot, mir_tar$Target)
ex<-mir_tar$Experiment[indices2]
clean_ex <- sapply(ex, fct_lire, "//|;", TRUE)
exp_unique <- c()
for (g_exp in clean_ex){
exp_unique <- append(exp_unique, unique(g_exp))
}
score_fort <- fct_score_tar_fort(exp_unique)
score_faible <- fct_score_tar_faible(exp_unique)
if (score_faible+score_fort < length(exp_unique)){
score_faible <- score_faible+1
}
target<- rbind(target, c(prot, score_fort, score_faible))
}
if (!is.null(target[1, 1])){
colnames(target)<- c('Target', "Nb of strong evidence", "Nb of less strong evidence")
}
return(target)
}
fct_triade_m_t_t_g <- function(mir, targ, coeff_fort, coeff_faible, seuil_evid){
prot_seuil <- targ$Target[as.numeric(targ$`Nb of strong evidence`)*coeff_fort + as.numeric(targ$`Nb of less strong evidence`)*coeff_faible >= seuil_evid]
if (is.na(prot_seuil[1, 1])) {
return(data.frame(Mir = rna, Issue = "No target with enough evidence"))
}
target_vect <- c()
therapie_vect <- c()
mir_vect <- c()
# Recherche de treatment -------
for (target in prot_seuil) {
target_exact <- paste0('^', target, '$')
indices <- grep(target_exact, target_therapie$Target)
if (length(indices)>0){
therapie <- target_therapie$Therapie[indices]
therapie_vect <- append(therapie_vect, therapie)
mir_vect <- append(mir_vect, c(rep(mir, length(indices))))
target_vect <-
append(target_vect, c(rep(target, length(indices))))
}
else{
therapie_vect <- append(therapie_vect, "No therapie available")
mir_vect <- append(mir_vect, mir)
target_vect <- append(target_vect, target)
}
}
# Creation des triades -----
m_t_t <-
data.frame(miR = mir_vect,
Target = target_vect,
Therapie = therapie_vect)
colnames(m_t_t)[3] <- "Treatment"
return(m_t_t)
}
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
a <- 1:8
a
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('mir4to.v2')
runApp('centrale_Nantes/Stage_2022/Meth4Cop')
shiny::runApp('centrale_Nantes/Stage_2022/Meth4Cop')
options(repos = BiocManager::repositories())
getOption("repos")
runApp('centrale_Nantes/Stage_2022/Meth4Cop')
shiny::runApp('mir4to.v2')
fct_target_to_mir("PBX1")
fct_target_to_mir("ETS1")
fct_target_to_mir("SMAD3")
runApp('mir4to.v2')
runApp('mir4to.v2')
m6ap <- c()
m7gp <- c()
m5cp <- c()
rien <- c()
for (mir in Base_util$Nom){
rnares <- fct_Matchtotal(mir, Base_util)
meth <- rnares$Methylation
if ("No methylation" %in% meth){
rien <- append(rien, mir)
}
if ("m6A" %in% meth){
m6ap <- append(m6ap, mir)
}
if ("m7G" %in% meth){
m7gp <- append(m7gp, mir)
}
if ("m5C" %in% meth){
m5cp <- append(m5cp, mir)
}
}
w<-fct_presence_listes("hsa-miR-92b-3p")
w
"Present"%in%w
null_part <- c()
for (mir in rien){
if(!("Present"%in%fct_presence_listes(mir))){
null_part <- append(null_part, mir)
}
}
length(Base_util$Nom)
320/2656*100
runApp('mir4to.v2')
runApp()
runApp('mir4to.v2')
runApp('centrale_Nantes/Stage_2022/Meth4Cop')
fct_target_to_mir("COBLL1")
fct_target_to_mir("LINC02615")
fct_target_to_mir("LINCO2615")
fct_target_to_mir("CPA6")
runApp('centrale_Nantes/Stage_2022/Meth4Cop')
runApp('centrale_Nantes/Stage_2022/Meth4Cop')
fct_target_to_mir("GRB14")
fct_target_to_mir_g <- function(target, Base_tar) {
# Sort les mirs impactant une target donnee
target_exact <- paste0('^', target, '$')
indices <- grep(target_exact, Base_tar$Target, ignore.case = TRUE)
mir_vect <- Base_tar$Mir[indices]
if (length(mir_vect) == 0) {
return(data.frame())
}
ev <- Base_tar$Experiment[indices]
mir_unique <- c()
mir_unique <- unique(mir_vect)
score_fort <- c()
score_faible <- c()
for (mir in mir_unique){
score_fort_tempo <- 0
score_faible_tempo <- 0
indices2<- grep(mir, mir_vect)
ex<-ev[indices2]
clean_ex <- sapply(ex, fct_lire, "//|;", TRUE)
exp_unique <- c()
for (g_exp in clean_ex){
exp_unique <- append(exp_unique, unique(g_exp))
}
score_fort_tempo <- fct_score_tar_fort(exp_unique)
score__faible_tempo <- fct_score_tar_faible(exp_unique)
if (score_fort_tempo+score_faible_tempo < length(exp_unique)){
score_faible_tempo <- score_faible_tempo+1
}
score_fort <- append(score_fort, score_fort_tempo)
score_faible <- append(score_faible, score_faible_tempo)
}
mirs <-
data.frame(Proteine = target, Mirs = mir_unique, Nb_forte = score_fort, Nb_faible = score_faible)
return(mirs)
}
fct_target_to_mir_g("GRB14", Base_util)
nom <- paste("Base_targ/hsa_MTI.csv", sep = "")
Base_ex <- read.csv(nom, header = TRUE)
incides_fun <- grep("Non-Functional MTI", Base_ex$Support.Type, invert = TRUE)
miRNA <- Base_ex$miRNA[incides_fun]
Target.gene <- Base_ex$Target.Gene[incides_fun]
experi <- Base_ex$Experiments[incides_fun]
Clean_target <- data.frame(Mir = miRNA, Target = Target.gene, Experiment = experi)
setwd("mir4to.v2/Base")
setwd("mir4to.v2/Base_targ")
nom <- paste("Base_targ/hsa_MTI.csv", sep = "")
Base_ex <- read.csv(nom, header = TRUE)
incides_fun <- grep("Non-Functional MTI", Base_ex$Support.Type, invert = TRUE)
miRNA <- Base_ex$miRNA[incides_fun]
Target.gene <- Base_ex$Target.Gene[incides_fun]
experi <- Base_ex$Experiments[incides_fun]
Clean_target <- data.frame(Mir = miRNA, Target = Target.gene, Experiment = experi)
setwd(..)
setwd(./)
